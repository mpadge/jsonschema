// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test
int test();
RcppExport SEXP _jsonschema_test() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_test
void rcpp_test(const std::string schema_name, const std::string json_name);
RcppExport SEXP _jsonschema_rcpp_test(SEXP schema_nameSEXP, SEXP json_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type schema_name(schema_nameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type json_name(json_nameSEXP);
    rcpp_test(schema_name, json_name);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_jsonschema_test", (DL_FUNC) &_jsonschema_test, 0},
    {"_jsonschema_rcpp_test", (DL_FUNC) &_jsonschema_rcpp_test, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_jsonschema(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
